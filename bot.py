import asyncio
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile

from DB import add_match_info, initDB, get_record_DB, add_stalk_info
from parserNew import get_game_info
from parserSSE import load_page_and_get_players

API_TOKEN = '7596556749:AAEvIdEDAtAwDipl14EuiVDWbcwk61XYbtY'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    await bot.set_my_commands(commands)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_name = message.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    gif_path = 'media/welcome.gif'  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ GIF

    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton(text="–ö–∞–∫–∏–µ –∏–≥—Ä—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –∏–ª–∏ —É–∂–µ –∏–¥—É—Ç?", callback_data="game_list")],
          # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    ]
    inline_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    gif_file = FSInputFile(gif_path)
    await message.answer_animation(animation=gif_file, caption=f"üëã –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, @{user_name}", reply_markup=inline_keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda query: query.data == "game_list")
async def game_list(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    game_list = get_game_info()

    keyboard = []

    response_message = "–í–æ—Ç –º–∞—Ç—á–∏ —á—Ç–æ —è –Ω–∞—à—ë–ª) (–ü–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ 3 —Å—Ç—Ä–∞–Ω)"
    for id, game_object in game_list.items():
        recordObj = {
            'mID': game_object['mID'],
            'nameCountry': game_object['nameCountry'],
            'urlCountry': game_object['urlCountry'],
            'nameTeam1': game_object['team1'],
            'nameTeam2': game_object['team2'],
            'idYear': game_object['yearID'],
        }
        add_match_info(recordObj)
        keyboard.append([InlineKeyboardButton(text=f"{game_object['nameCountry']}: {game_object['toStr']}", callback_data=f"=selectGame={id}")])

    inline_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=keyboard)
    await query.message.answer(response_message, reply_markup=inline_keyboard, parse_mode='Markdown')
    #await query.answer()  # –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

@dp.callback_query(lambda query: query.data.startswith("=selectGame="))
async def selectGame(query: types.CallbackQuery):
    id = query.data.replace('=selectGame=', '')
    gameInfo = get_record_DB('gameInfo', id)
    keyboard = []
    keyboard.append([InlineKeyboardButton(text=f"{gameInfo['nameTeam1']}", callback_data=f"=selectCommand=Home={id}")])
    keyboard.append([InlineKeyboardButton(text=f"{gameInfo['nameTeam2']}", callback_data=f"=selectCommand=Guest={id}")])

    inline_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=keyboard)
    response_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É)"
    await query.message.answer(response_message, reply_markup=inline_keyboard, parse_mode='Markdown')
    await query.answer()
@dp.callback_query(lambda query: query.data.startswith("=selectCommand="))
async def selectCommand(query: types.CallbackQuery):
    promt = query.data.replace('=selectCommand=', '')
    id = 0
    team = 'team'
    if(promt.__contains__('Home=')):
        id = promt.replace('Home=', '')
        team += '1'
    else:
        id = promt.replace('Guest=', '')
        team += '2'


    commandInfo = load_page_and_get_players(id)
    commandList = commandInfo[team]

    keyboard = []
    for player in commandList:
        keyboard.append([InlineKeyboardButton(text=f"{player['pNumber']} {player['pName']}", callback_data=f"=selectPlayer=mId={id}={player['pNumber']}")])

    inline_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=keyboard)
    response_message = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞)"
    await query.message.answer(response_message, reply_markup=inline_keyboard, parse_mode='Markdown')
    #await query.answer()

@dp.callback_query(lambda query: query.data.startswith("=selectPlayer="))
async def selectCommand(query: types.CallbackQuery):
    promt = query.data.replace('=selectPlayer=', '')
    mId = promt.split('=')[1]
    pNumber = promt.split('=')[2]
    objAdd = {
        'mID': mId,
        'numberPlayer': pNumber,
        'idUser': query.from_user.id,
    }
    start = datetime.now()
    print(datetime.now())
    add_stalk_info(objAdd)
    print(datetime.now() - start)
    await query.message.answer('–ò–≥—Ä–æ–∫ –∑–∞–ø–æ–º–Ω–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –µ–≥–æ —É—Ö–æ–¥ —Å  –ø–æ–ª—è', parse_mode='Markdown')
    await query.answer()
@dp.callback_query()
async def handle_callback(query: types.CallbackQuery):
    await query.message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ({query.data})")
    await query.answer()  # –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

async def main():
    try:
        initDB()
        await set_commands(bot)
        await dp.start_polling(bot)
    except Exception as e:
        print(f"Polling error: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
