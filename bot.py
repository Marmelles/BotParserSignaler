import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, FSInputFile, WebAppInfo

from parser import get_game_info

API_TOKEN = '7596556749:AAEvIdEDAtAwDipl14EuiVDWbcwk61XYbtY'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    await bot.set_my_commands(commands)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_name = message.from_user.first_name  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    gif_path = 'media/welcome.gif'  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ GIF

    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton(text="–ö–∞–∫–∏–µ –∏–≥—Ä—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –∏–ª–∏ —É–∂–µ –∏–¥—É—Ç?", callback_data="game_list")],
          # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    ]
    inline_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    gif_file = FSInputFile(gif_path)
    await message.answer_animation(animation=gif_file, caption=f"üëã –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, @{user_name}", reply_markup=inline_keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda query: query.data == "game_list")
async def game_list(query: types.CallbackQuery):
    await bot.answer_callback_query(query.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    game_urls = get_game_info()

    keyboard = []

    response_message = "–í–æ—Ç –º–∞—Ç—á–∏ —á—Ç–æ —è –Ω–∞—à—ë–ª) (–ü–æ–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–æ 7 –º–∞—Ç—á–µ–π)"
    for country, game_array in game_urls.items():
        for game_info in game_array:
            keyboard.append([InlineKeyboardButton(text=f"{game_info['toStr']}", callback_data=f"mID={game_info['mID']}")])

    inline_keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=keyboard)
    await query.message.answer(response_message, reply_markup=inline_keyboard, parse_mode='Markdown')
    #await query.answer()  # –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

@dp.callback_query(lambda query: query.data.startswith("mID="))
async def selectGame(query: types.CallbackQuery):
    mID = query.data .replace('mID=', '')
    mID = int(mID)
    response_message = f'–ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ, –Ω–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º) ({mID})'
    await query.message.answer(response_message, parse_mode='Markdown')
@dp.callback_query()
async def handle_callback(query: types.CallbackQuery):
    await query.message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    await query.answer()  # –ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

async def main():
    try:
        await set_commands(bot)
        await dp.start_polling(bot)
    except Exception as e:
        print(f"Polling error: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped")
